#BlueJ class context
comment0.params=d\ len
comment0.target=java.lang.String\ encode_base64(byte[],\ int)
comment0.text=\n\ Encode\ a\ byte\ array\ using\ bcrypt's\ slightly-modified\ base64\n\ encoding\ scheme.\ Note\ that\ this\ is\ *not*\ compatible\ with\n\ the\ standard\ MIME-base64\ encoding.\n\n\ @param\ d\tthe\ byte\ array\ to\ encode\n\ @param\ len\tthe\ number\ of\ bytes\ to\ encode\n\ @return\tbase64-encoded\ string\n\ @exception\ IllegalArgumentException\ if\ the\ length\ is\ invalid\n
comment1.params=x
comment1.target=byte\ char64(char)
comment1.text=\n\ Look\ up\ the\ 3\ bits\ base64-encoded\ by\ the\ specified\ character,\n\ range-checking\ againt\ conversion\ table\n\ @param\ x\tthe\ base64-encoded\ value\n\ @return\tthe\ decoded\ value\ of\ x\n
comment10.params=log_rounds\ random
comment10.target=java.lang.String\ gensalt(int,\ java.security.SecureRandom)
comment10.text=\n\ Generate\ a\ salt\ for\ use\ with\ the\ BCrypt.hashpw()\ method\n\ @param\ log_rounds\tthe\ log2\ of\ the\ number\ of\ rounds\ of\n\ hashing\ to\ apply\ -\ the\ work\ factor\ therefore\ increases\ as\n\ 2**log_rounds.\n\ @param\ random\t\tan\ instance\ of\ SecureRandom\ to\ use\n\ @return\tan\ encoded\ salt\ value\n
comment11.params=log_rounds
comment11.target=java.lang.String\ gensalt(int)
comment11.text=\n\ Generate\ a\ salt\ for\ use\ with\ the\ BCrypt.hashpw()\ method\n\ @param\ log_rounds\tthe\ log2\ of\ the\ number\ of\ rounds\ of\n\ hashing\ to\ apply\ -\ the\ work\ factor\ therefore\ increases\ as\n\ 2**log_rounds.\n\ @return\tan\ encoded\ salt\ value\n
comment12.params=
comment12.target=java.lang.String\ gensalt()
comment12.text=\n\ Generate\ a\ salt\ for\ use\ with\ the\ BCrypt.hashpw()\ method,\n\ selecting\ a\ reasonable\ default\ for\ the\ number\ of\ hashing\n\ rounds\ to\ apply\n\ @return\tan\ encoded\ salt\ value\n
comment13.params=plaintext\ hashed
comment13.target=boolean\ checkpw(java.lang.String,\ java.lang.String)
comment13.text=\n\ Check\ that\ a\ plaintext\ password\ matches\ a\ previously\ hashed\n\ one\n\ @param\ plaintext\tthe\ plaintext\ password\ to\ verify\n\ @param\ hashed\tthe\ previously-hashed\ password\n\ @return\ttrue\ if\ the\ passwords\ match,\ false\ otherwise\n
comment2.params=s\ maxolen
comment2.target=byte[]\ decode_base64(java.lang.String,\ int)
comment2.text=\n\ Decode\ a\ string\ encoded\ using\ bcrypt's\ base64\ scheme\ to\ a\n\ byte\ array.\ Note\ that\ this\ is\ *not*\ compatible\ with\n\ the\ standard\ MIME-base64\ encoding.\n\ @param\ s\tthe\ string\ to\ decode\n\ @param\ maxolen\tthe\ maximum\ number\ of\ bytes\ to\ decode\n\ @return\tan\ array\ containing\ the\ decoded\ bytes\n\ @throws\ IllegalArgumentException\ if\ maxolen\ is\ invalid\n
comment3.params=lr\ off
comment3.target=void\ encipher(int[],\ int)
comment3.text=\n\ Blowfish\ encipher\ a\ single\ 64-bit\ block\ encoded\ as\n\ two\ 32-bit\ halves\n\ @param\ lr\tan\ array\ containing\ the\ two\ 32-bit\ half\ blocks\n\ @param\ off\tthe\ position\ in\ the\ array\ of\ the\ blocks\n
comment4.params=data\ offp
comment4.target=int\ streamtoword(byte[],\ int[])
comment4.text=\n\ Cycically\ extract\ a\ word\ of\ key\ material\n\ @param\ data\tthe\ string\ to\ extract\ the\ data\ from\n\ @param\ offp\ta\ "pointer"\ (as\ a\ one-entry\ array)\ to\ the\n\ current\ offset\ into\ data\n\ @return\tthe\ next\ word\ of\ material\ from\ data\n
comment5.params=
comment5.target=void\ init_key()
comment5.text=\n\ Initialise\ the\ Blowfish\ key\ schedule\n
comment6.params=key
comment6.target=void\ key(byte[])
comment6.text=\n\ Key\ the\ Blowfish\ cipher\n\ @param\ key\tan\ array\ containing\ the\ key\n
comment7.params=data\ key
comment7.target=void\ ekskey(byte[],\ byte[])
comment7.text=\n\ Perform\ the\ "enhanced\ key\ schedule"\ step\ described\ by\n\ Provos\ and\ Mazieres\ in\ "A\ Future-Adaptable\ Password\ Scheme"\n\ http\://www.openbsd.org/papers/bcrypt-paper.ps\n\ @param\ data\tsalt\ information\n\ @param\ key\tpassword\ information\n
comment8.params=password\ salt\ log_rounds\ cdata
comment8.target=byte[]\ crypt_raw(byte[],\ byte[],\ int,\ int[])
comment8.text=\n\ Perform\ the\ central\ password\ hashing\ step\ in\ the\n\ bcrypt\ scheme\n\ @param\ password\tthe\ password\ to\ hash\n\ @param\ salt\tthe\ binary\ salt\ to\ hash\ with\ the\ password\n\ @param\ log_rounds\tthe\ binary\ logarithm\ of\ the\ number\n\ of\ rounds\ of\ hashing\ to\ apply\n\ @param\ cdata\ \ \ \ \ \ \ \ \ the\ plaintext\ to\ encrypt\n\ @return\tan\ array\ containing\ the\ binary\ hashed\ password\n
comment9.params=password\ salt
comment9.target=java.lang.String\ hashpw(java.lang.String,\ java.lang.String)
comment9.text=\n\ Hash\ a\ password\ using\ the\ OpenBSD\ bcrypt\ scheme\n\ @param\ password\tthe\ password\ to\ hash\n\ @param\ salt\tthe\ salt\ to\ hash\ with\ (perhaps\ generated\n\ using\ BCrypt.gensalt)\n\ @return\tthe\ hashed\ password\n
numComments=14
